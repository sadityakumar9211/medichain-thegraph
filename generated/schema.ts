// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AddedPatient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedPatient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedPatient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedPatient", id.toString(), this);
    }
  }

  static load(id: string): AddedPatient | null {
    return changetype<AddedPatient | null>(store.get("AddedPatient", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    return value!.toBytes();
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get dob(): BigInt {
    let value = this.get("dob");
    return value!.toBigInt();
  }

  set dob(value: BigInt) {
    this.set("dob", Value.fromBigInt(value));
  }

  get phoneNumber(): string | null {
    let value = this.get("phoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set phoneNumber(value: string | null) {
    if (!value) {
      this.unset("phoneNumber");
    } else {
      this.set("phoneNumber", Value.fromString(<string>value));
    }
  }

  get bloodGroup(): string {
    let value = this.get("bloodGroup");
    return value!.toString();
  }

  set bloodGroup(value: string) {
    this.set("bloodGroup", Value.fromString(value));
  }

  get dateOfRegistration(): BigInt {
    let value = this.get("dateOfRegistration");
    return value!.toBigInt();
  }

  set dateOfRegistration(value: BigInt) {
    this.set("dateOfRegistration", Value.fromBigInt(value));
  }

  get vaccinationHash(): Array<string> | null {
    let value = this.get("vaccinationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set vaccinationHash(value: Array<string> | null) {
    if (!value) {
      this.unset("vaccinationHash");
    } else {
      this.set("vaccinationHash", Value.fromStringArray(<Array<string>>value));
    }
  }

  get accidentHash(): Array<string> | null {
    let value = this.get("accidentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set accidentHash(value: Array<string> | null) {
    if (!value) {
      this.unset("accidentHash");
    } else {
      this.set("accidentHash", Value.fromStringArray(<Array<string>>value));
    }
  }

  get chronicHash(): Array<string> | null {
    let value = this.get("chronicHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set chronicHash(value: Array<string> | null) {
    if (!value) {
      this.unset("chronicHash");
    } else {
      this.set("chronicHash", Value.fromStringArray(<Array<string>>value));
    }
  }

  get acuteHash(): Array<string> | null {
    let value = this.get("acuteHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set acuteHash(value: Array<string> | null) {
    if (!value) {
      this.unset("acuteHash");
    } else {
      this.set("acuteHash", Value.fromStringArray(<Array<string>>value));
    }
  }

  get publicKey(): string {
    let value = this.get("publicKey");
    return value!.toString();
  }

  set publicKey(value: string) {
    this.set("publicKey", Value.fromString(value));
  }
}

export class AddedDoctor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedDoctor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedDoctor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedDoctor", id.toString(), this);
    }
  }

  static load(id: string): AddedDoctor | null {
    return changetype<AddedDoctor | null>(store.get("AddedDoctor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get doctorAddress(): Bytes {
    let value = this.get("doctorAddress");
    return value!.toBytes();
  }

  set doctorAddress(value: Bytes) {
    this.set("doctorAddress", Value.fromBytes(value));
  }

  get dateOfRegistration(): BigInt {
    let value = this.get("dateOfRegistration");
    return value!.toBigInt();
  }

  set dateOfRegistration(value: BigInt) {
    this.set("dateOfRegistration", Value.fromBigInt(value));
  }

  get specialization(): string {
    let value = this.get("specialization");
    return value!.toString();
  }

  set specialization(value: string) {
    this.set("specialization", Value.fromString(value));
  }

  get doctorRegistrationId(): string {
    let value = this.get("doctorRegistrationId");
    return value!.toString();
  }

  set doctorRegistrationId(value: string) {
    this.set("doctorRegistrationId", Value.fromString(value));
  }

  get hospitalAddress(): Bytes | null {
    let value = this.get("hospitalAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hospitalAddress(value: Bytes | null) {
    if (!value) {
      this.unset("hospitalAddress");
    } else {
      this.set("hospitalAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class AddedHospital extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedHospital entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedHospital must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedHospital", id.toString(), this);
    }
  }

  static load(id: string): AddedHospital | null {
    return changetype<AddedHospital | null>(store.get("AddedHospital", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get hospitalAddress(): Bytes {
    let value = this.get("hospitalAddress");
    return value!.toBytes();
  }

  set hospitalAddress(value: Bytes) {
    this.set("hospitalAddress", Value.fromBytes(value));
  }

  get dateOfRegistration(): BigInt {
    let value = this.get("dateOfRegistration");
    return value!.toBigInt();
  }

  set dateOfRegistration(value: BigInt) {
    this.set("dateOfRegistration", Value.fromBigInt(value));
  }

  get hospitalRegistrationId(): string {
    let value = this.get("hospitalRegistrationId");
    return value!.toString();
  }

  set hospitalRegistrationId(value: string) {
    this.set("hospitalRegistrationId", Value.fromString(value));
  }

  get email(): string | null {
    let value = this.get("email");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set email(value: string | null) {
    if (!value) {
      this.unset("email");
    } else {
      this.set("email", Value.fromString(<string>value));
    }
  }

  get phoneNumber(): string | null {
    let value = this.get("phoneNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set phoneNumber(value: string | null) {
    if (!value) {
      this.unset("phoneNumber");
    } else {
      this.set("phoneNumber", Value.fromString(<string>value));
    }
  }
}

export class AddedPublicKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddedPublicKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddedPublicKey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddedPublicKey", id.toString(), this);
    }
  }

  static load(id: string): AddedPublicKey | null {
    return changetype<AddedPublicKey | null>(store.get("AddedPublicKey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get patientAddress(): Bytes {
    let value = this.get("patientAddress");
    return value!.toBytes();
  }

  set patientAddress(value: Bytes) {
    this.set("patientAddress", Value.fromBytes(value));
  }

  get publicKey(): string {
    let value = this.get("publicKey");
    return value!.toString();
  }

  set publicKey(value: string) {
    this.set("publicKey", Value.fromString(value));
  }
}
